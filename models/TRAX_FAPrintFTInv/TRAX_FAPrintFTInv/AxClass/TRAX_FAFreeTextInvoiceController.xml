<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TRAX_FAFreeTextInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TRAX_FAFreeTextInvoiceController 
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TRAX_FAFreeTextInvoiceController controller = new TRAX_FAFreeTextInvoiceController();
        RecordSortedList journalList;
        CustInvoiceJour custInvoiceJour;

        journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();
        
        boolean recExists = journalList.first(custInvoiceJour);

        while (recExists)
        {
            info(strFmt("Printing %1", custInvoiceJour.InvoiceId));
            controller.printToFile(custInvoiceJour);
            
            recExists = journalList.next(custInvoiceJour);
            sleep(3000);
            //if (!recExists ||
            //    Box::yesNo("Do you want to print next invoice?", DialogButton::Yes) == DialogButton::No)
            //{
            //    recExists = false;
            //}
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToFile</Name>
				<Source><![CDATA[
    public void printToFile(CustInvoiceJour _custInvoiceJour)
    {

        Args args = new Args();
        args.record(_custInvoiceJour);

        FreeTextInvoiceController controller = new FreeTextInvoiceController();
        
        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat());
        controller.parmArgs(args);
        
        FreeTextInvoiceContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmCustInvoiceJourRecId(_custInvoiceJour.RecId);
        rdpContract.parmCountryRegionISOCode(SysCountryRegionCode::countryInfo());
        
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::File);// ::GenerateDataSource_DC);
        pds.fileFormat(SRSReportFileFormat::PDF);
        pds.filename(_custInvoiceJour.InvoiceId + '.PDF');
        pds.overwriteFile(true);

        SalesFormLetter_FreeText salesFormLetter = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
        salesFormLetter.proforma(false);
        salesFormLetter.usePrintManagement(false);
        salesFormLetter.parmUseUserDefinedDestinations(true);
        salesFormLetter.updatePrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack(), PrintSetupOriginalCopy::Original);

        args.caller(salesFormLetter);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::Original);

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToMemoryStream</Name>
				<Source><![CDATA[
    public void printToMemoryStream(CustInvoiceJour _custInvoiceJour)
    {
        Args args = new Args();
        FreeTextInvoiceController controller = new FreeTextInvoiceController();
    
        // Set the SalesFreeTextInvoice.Report as SSRS Report Design.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat());
 
        // In order to have the context table we need to set args.record().
        // We will just select the first posted invoice.
        args.record(_custInvoiceJour);
 
        // Set the report data contract with parameters.
        FreeTextInvoiceContract contract = controller.parmReportContract().parmRdpContract();
        contract.parmCustInvoiceJourRecId(_custInvoiceJour.RecId);
 
        DocSrsReportGenerator reportGenerator = new DocSrsReportGenerator(controller);
        reportGenerator.setPrintDestinationSettings_SsrsReport(SRSReportFileFormat::PDF);
 
        // NOTE: If you want to generate the report using a Docentric template, use this line of code instead.
        // reportGenerator.setPrintDestinationSettings_DocentricReport(DocOutputFileFormat::PDF);
 
        // Initalize SalesFormLetter_FreeText class instance because there is no other way
        // NOT to use Print Management.
        SalesFormLetter_FreeText salesFormLetter = SalesFormLetter_FreeText::newFreeText();
        salesFormLetter.printFormLetter(NoYes::Yes);
        salesFormLetter.usePrintManagement(false);
        salesFormLetter.parmUseUserDefinedDestinations(true);
        salesFormLetter.updatePrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack());
 
        args.caller(salesFormLetter);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::OriginalPrint);
        controller.parmArgs(args);
          
        // Start the report execution and wait until the report content is not generated.
        container generatedInvoice = reportGenerator.generateReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main_OLD</Name>
				<Source><![CDATA[
    public static void main_OLD(Args _args)
    {
        //<GEEPL>
        #ISOCountryRegionCodes
        RecordSortedList journalList;
        CustInvoiceJour custInvoiceJour;
        CustInvoiceDuplicateTable_W custInvoiceDuplicateTable;
        //</GEEPL>
        FreeTextInvoiceController controller = new FreeTextInvoiceController();
        // <GTE>
        Common common;
        // </GTE>

        //if (!FeatureStateProvider::isFeatureEnabled(FreeTextInvoiceERFormatUseRDPModelMappingEnableFeature::instance()) &&
        //    !NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(
        //         PrintMgmtDocumentType::SalesFreeTextInvoice,
        //         _args))
        //{
        //    return;
        //}

        controller.originalArgs = _args;

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (_args.dataset() == tableNum(CustInvoiceDuplicateTable_W))
            {
                custInvoiceDuplicateTable = _args.record();
                _args.record(custInvoiceDuplicateTable.custInvoiceJour());
                controller.parmDuplicateInvoiceRecId(custInvoiceDuplicateTable.RecId);
            }

            switch (custInvoiceJour.custInvoiceJour_PL().FiscalDocState_PL)
            {
                case PlFiscalDocState::FiscalDocument:
                    try
                    {
                        PlFiscalPrinterHandling::generateFiscalDoc(custInvoiceJour);
                        return;
                    }
                    catch
                    {
                        // Allow execution to continue of PlFiscalPrinterHandling throws an error
                        return;
                    }
                case PlFiscalDocState::PrintedFiscalDocument:
                    info("@GLS110142");
                    return;
                default:
                    break;
            }
        }
        // </GEEPL>

        //<GMX>
        if (EInvoiceParameters_MX::isElectronicInvoiceEnabled()
         && EInvoiceFreeTextController_MX::hasEInvoice(_args))
        {
            EInvoiceFreeTextController_MX::main(_args);
            return;
        }
        //</GMX>

        journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();
        journalList.first(custInvoiceJour);

        // <GTH>
        if (!CustInvoiceJourExtensionTH::canInvoiceBePrinted(_args))
        {
            return;
        }

        // print document set
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled()
            && _args.parmEnum() != PrintCopyOriginal::OriginalPrint)
        {
            FreeTextInvoiceController::printDocumentSet(_args);
        }
        else
        {
            // </GTH>
            // <GTE><GIN>
            journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();
            journalList.first(custInvoiceJour);

            //common = controller.getTaxDocumentSourceTable(custInvoiceJour);

            //if (TaxGSTInvoiceHelper_IN::isGSTInvoice(common))
            //{
            //    controller.parmIsGSTInvoice_IN(true);
            //    controller.parmCustInvoice_IN(common);
            //}
            // </GTE></GIN>

            controller.parmReportName(controller.getReportName(common));
            controller.parmArgs(_args);
            
            controller.parmShowDialog(false);

            ///////////////////////////////////////
            
            controller.parmLoadFromSysLastValue(false);
            // Provide printer settings
            SRSPrintDestinationSettings settings = new SRSPrintDestinationSettings();
            settings.printMediumType(SRSPrintMediumType::File);
            SRSPrintMedium fileMedium = new SRSPrintMedium();

            settings.printMedium(fileMedium);
            settings.fileName('aaa.pdf');
            settings.fileFormat(SRSReportFileFormat::PDF);
            
            controller.parmReportContract().parmPrintSettings(settings);
            ///////////////////////////////////////
         

            //if (_args.parmObject()
            //    && _args.parmObject() is CustInvoiceControllerFileURLsCollectionIdProvider)
            //{
            //    CustInvoiceControllerFileURLsCollectionIdProvider fileURLsCollectionIdProvider = _args.parmObject() as CustInvoiceControllerFileURLsCollectionIdProvider;
            //    controller.parmFileURLsCollectionId(fileURLsCollectionIdProvider.getFileURLsCollectionId());
            //}

            controller.startOperation();
            // <GTH>
        }
        // </GTH>

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>