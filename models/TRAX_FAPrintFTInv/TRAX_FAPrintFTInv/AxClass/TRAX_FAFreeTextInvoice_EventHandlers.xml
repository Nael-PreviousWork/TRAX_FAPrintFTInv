<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TRAX_FAFreeTextInvoice_EventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TRAX_FAFreeTextInvoice_EventHandlers
{


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printToMemoryStream</Name>
				<Source><![CDATA[
    public void printToMemoryStream(CustInvoiceJour _custInvoiceJour)
    {
        Args args = new Args();
        FreeTextInvoiceController controller = new FreeTextInvoiceController();
    
        // Set the SalesFreeTextInvoice.Report as SSRS Report Design.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat());
 
        // In order to have the context table we need to set args.record().
        // We will just select the first posted invoice.
        args.record(_custInvoiceJour);
 
        // Set the report data contract with parameters.
        FreeTextInvoiceContract contract = controller.parmReportContract().parmRdpContract();
        contract.parmCustInvoiceJourRecId(_custInvoiceJour.RecId);
 
        DocSrsReportGenerator reportGenerator = new DocSrsReportGenerator(controller);
        reportGenerator.setPrintDestinationSettings_SsrsReport(SRSReportFileFormat::PDF);
 
        // NOTE: If you want to generate the report using a Docentric template, use this line of code instead.
        // reportGenerator.setPrintDestinationSettings_DocentricReport(DocOutputFileFormat::PDF);
 
        // Initalize SalesFormLetter_FreeText class instance because there is no other way
        // NOT to use Print Management.
        SalesFormLetter_FreeText salesFormLetter = SalesFormLetter_FreeText::newFreeText();
        salesFormLetter.printFormLetter(NoYes::Yes);
        salesFormLetter.usePrintManagement(false);
        salesFormLetter.parmUseUserDefinedDestinations(true);
        salesFormLetter.updatePrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack());
 
        args.caller(salesFormLetter);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::OriginalPrint);
        controller.parmArgs(args);
          
        // Start the report execution and wait until the report content is not generated.
        container generatedInvoice = reportGenerator.generateReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToFile</Name>
				<Source><![CDATA[
    public void printToFile(CustInvoiceJour _custInvoiceJour)
    {
        CustInvoiceJour custInvoiceJour = _custInvoiceJour;

        Args args = new Args();
        args.record(custInvoiceJour);

        FreeTextInvoiceController controller = new FreeTextInvoiceController();
        
        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat());
        controller.parmArgs(args);
        
        FreeTextInvoiceContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmCustInvoiceJourRecId(custInvoiceJour.RecId);
        rdpContract.parmCountryRegionISOCode(SysCountryRegionCode::countryInfo());
        
        // Set the Docentric Generate DS print destination settings.
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::File);// ::GenerateDataSource_DC);
        pds.fileFormat(SRSReportFileFormat::PDF);
        pds.filename(custInvoiceJour.InvoiceId + '.PDF');
        pds.overwriteFile(true);

        // TODO: (3) Set Design and Preview languages if needed.
        //pds.parmGenerateDSPrintDestSettings_DC().parmLanguageId(custInvoiceJour.LanguageId);
        //pds.parmGenerateDSPrintDestSettings_DC().parmPreviewLanguages('fr,de,it,es');
        
        SalesFormLetter_FreeText salesFormLetter = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
        salesFormLetter.proforma(false);
        salesFormLetter.usePrintManagement(false);
        salesFormLetter.parmUseUserDefinedDestinations(true);
        salesFormLetter.updatePrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack(), PrintSetupOriginalCopy::Original);

        args.caller(salesFormLetter);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::Original);

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>